//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSCloudClient.CSCloudServerProxyHttp {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CSCloudServerProxyHttp.ICSCloudServer", CallbackContract=typeof(CSCloudServerProxyHttp.ICSCloudServerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICSCloudServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/Connect", ReplyAction="http://tempuri.org/ICSCloudServer/ConnectResponse")]
        bool Connect(string clientName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/Connect", ReplyAction="http://tempuri.org/ICSCloudServer/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(string clientName, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICSCloudServer/Disconnect")]
        void Disconnect(string ClientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICSCloudServer/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(string ClientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/GetExecutedCommands", ReplyAction="http://tempuri.org/ICSCloudServer/GetExecutedCommandsResponse")]
        CSCloud.Data.CSCloudCommandRecord[] GetExecutedCommands();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/GetExecutedCommands", ReplyAction="http://tempuri.org/ICSCloudServer/GetExecutedCommandsResponse")]
        System.Threading.Tasks.Task<CSCloud.Data.CSCloudCommandRecord[]> GetExecutedCommandsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/GetClients", ReplyAction="http://tempuri.org/ICSCloudServer/GetClientsResponse")]
        CSCloud.Data.CSCloudClientRecord[] GetClients(bool OnlyActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/GetClients", ReplyAction="http://tempuri.org/ICSCloudServer/GetClientsResponse")]
        System.Threading.Tasks.Task<CSCloud.Data.CSCloudClientRecord[]> GetClientsAsync(bool OnlyActive);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICSCloudServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/GetName", ReplyAction="http://tempuri.org/ICSCloudServer/GetNameResponse")]
        string GetName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSCloudServer/ExecuteCommand", ReplyAction="http://tempuri.org/ICSCloudServer/ExecuteCommandResponse")]
        CSCloud.Data.CSCloudResponse ExecuteCommand(CSCloud.Data.CSCloudRequest command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICSCloudServerChannel : CSCloudServerProxyHttp.ICSCloudServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CSCloudServerClient : System.ServiceModel.DuplexClientBase<CSCloudServerProxyHttp.ICSCloudServer>, CSCloudServerProxyHttp.ICSCloudServer {
        
        public CSCloudServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CSCloudServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CSCloudServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CSCloudServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CSCloudServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Connect(string clientName, string password) {
            return base.Channel.Connect(clientName, password);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(string clientName, string password) {
            return base.Channel.ConnectAsync(clientName, password);
        }
        
        public void Disconnect(string ClientName) {
            base.Channel.Disconnect(ClientName);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string ClientName) {
            return base.Channel.DisconnectAsync(ClientName);
        }
        
        public CSCloud.Data.CSCloudCommandRecord[] GetExecutedCommands() {
            return base.Channel.GetExecutedCommands();
        }
        
        public System.Threading.Tasks.Task<CSCloud.Data.CSCloudCommandRecord[]> GetExecutedCommandsAsync() {
            return base.Channel.GetExecutedCommandsAsync();
        }
        
        public CSCloud.Data.CSCloudClientRecord[] GetClients(bool OnlyActive) {
            return base.Channel.GetClients(OnlyActive);
        }
        
        public System.Threading.Tasks.Task<CSCloud.Data.CSCloudClientRecord[]> GetClientsAsync(bool OnlyActive) {
            return base.Channel.GetClientsAsync(OnlyActive);
        }
    }
}
